@startuml

title __BLOCK's Class Diagram__\n

  namespace org.block {
    namespace project.block {
      abstract class org.block.project.block.AbstractBlock {
          # error : boolean
          # events : Set<EventListener<? extends BlockEvent>>
          # height : int
          # highlighted : boolean
          # id : UUID
          # layer : int
          # selected : boolean
          # width : int
          # x : int
          # y : int
          + AbstractBlock()
          + getAttachedTo()
          + getEvents()
          + getHeight()
          + getLayer()
          + getUniqueId()
          + getWidth()
          + getX()
          + getY()
          + isHighlighted()
          + isSelected()
          + isShowingError()
          + registerEventListener()
          + setAttachedTo()
          + setHighlighted()
          + setLayer()
          + setSelected()
          + setShowingError()
          + setX()
          + setY()
      }
      interface org.block.project.block.Block {
          + callEvent()
          + contains()
          + delete()
          {abstract} + getAttachedTo()
          {abstract} + getCodeImports()
          {abstract} + getEvents()
          {abstract} + getHeight()
          {abstract} + getLayer()
          + getRightClick()
          {abstract} + getType()
          {abstract} + getUniqueId()
          {abstract} + getWidth()
          {abstract} + getX()
          {abstract} + getY()
          {abstract} + isHighlighted()
          {abstract} + isSelected()
          {abstract} + isShowingError()
          {abstract} + paint()
          {abstract} + registerEventListener()
          + removeAttachedTo()
          {abstract} + setAttachedTo()
          {abstract} + setHighlighted()
          {abstract} + setLayer()
          {abstract} + setSelected()
          {abstract} + setShowingError()
          {abstract} + setX()
          {abstract} + setY()
          {static} + tab()
          + update()
          {abstract} + writeCode()
      }
      interface org.block.project.block.Block.AttachableBlock {
          + canAttach()
          + containsAttachment()
          {abstract} + containsSection()
          + delete()
          {abstract} + getAttachments()
          {abstract} + getSections()
          + removeAttachment()
          + update()
      }
      interface org.block.project.block.Block.AttachableBlock.StatementBlock {
      }
      interface org.block.project.block.Block.CalledBlock {
          {static} + CLASS : int
          {static} + CONSTRUCTOR : int
          {static} + FIELD : int
          {static} + METHOD : int
          {abstract} + writeBlockCode()
      }
      interface org.block.project.block.Block.CalledBlock.CodeStartBlock {
          + writeCode()
      }
      interface org.block.project.block.Block.LinkedBlock {
          {abstract} + getLinkedBlock()
      }
      interface org.block.project.block.Block.SpecificSectionBlock {
          {abstract} + getUniqueSections()
      }
      interface org.block.project.block.Block.TextBlock {
          {abstract} + getText()
          {abstract} + setText()
      }
      interface org.block.project.block.Block.ValueBlock {
          {abstract} + getExpectedValue()
      }
      interface org.block.project.block.Block.ValueBlock.ConnectedValueBlock {
          + getExpectedValue()
          {abstract} + getValue()
      }
      interface org.block.project.block.Block.ValueBlock.ConnectedValueBlock.MutableConnectedValueBlock {
          {abstract} + createDialog()
          + getRightClick()
          {abstract} + setValue()
      }
      interface org.block.project.block.BlockType {
          {static} + BLOCK_TYPE_INTEGER : IntegerBlockType
          {static} + BLOCK_TYPE_METHOD : MethodBlockType
          {static} + BLOCK_TYPE_MINUS : MinusOperationType
          {static} + BLOCK_TYPE_STRING : StringBlockType
          {static} + BLOCK_TYPE_SUM : SumOperationType
          {static} + BLOCK_TYPE_VARIABLE : VariableBlockType
          {static} + BLOCK_TYPE_VARIABLE_USE : VariableBlockType
          {static} + TITLE_DEPENDS : Listable<UUID>
          {static} + TITLE_LAYER : FixedTitle<Integer>
          {static} + TITLE_UUID : FixedTitle<UUID>
          {static} + TITLE_X : FixedTitle<Integer>
          {static} + TITLE_Y : FixedTitle<Integer>
          {abstract} + build()
          {abstract} + build()
          + buildDefault()
          {abstract} + getName()
          {abstract} + saveLocation()
          + write()
      }
      interface org.block.project.block.Shapes {
          {static} + ATTACHABLE_HEIGHT : int
          {static} + ATTACHABLE_WIDTH : int
          {static} + drawAttachableConnector()
          {static} + drawAttachingConnector()
      }
    }
  }
  

  org.block.project.block.AbstractBlock .up.|> org.block.project.block.Block
  org.block.project.block.AbstractBlock o-- org.block.project.block.Block.AttachableBlock : attachedTo
  org.block.project.block.Block +-down- org.block.project.block.Block.AttachableBlock
  org.block.project.block.Block +-down- org.block.project.block.Block.CalledBlock
  org.block.project.block.Block +-down- org.block.project.block.Block.LinkedBlock
  org.block.project.block.Block +-down- org.block.project.block.Block.SpecificSectionBlock
  org.block.project.block.Block +-down- org.block.project.block.Block.TextBlock
  org.block.project.block.Block +-down- org.block.project.block.Block.ValueBlock
  org.block.project.block.Block.AttachableBlock +-down- org.block.project.block.Block.AttachableBlock.StatementBlock
  org.block.project.block.Block.CalledBlock +-down- org.block.project.block.Block.CalledBlock.CodeStartBlock
  org.block.project.block.Block.ValueBlock +-down- org.block.project.block.Block.ValueBlock.ConnectedValueBlock
  org.block.project.block.Block.ValueBlock.ConnectedValueBlock +-down- org.block.project.block.Block.ValueBlock.ConnectedValueBlock.MutableConnectedValueBlock

@enduml
